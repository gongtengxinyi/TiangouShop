<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">    
	<!-- 配置数据源 -->
	 <!-- 激活annotation功能 -->  
    <context:annotation-config />  
	    <context:property-placeholder location="classpath*:rabbitmq.properties"
    ignore-unresolvable="true" />
	    <import resource="classpath*:rabbitmq.xml" />
 <aop:aspectj-autoproxy proxy-target-class="true"/>  
	<!-- 使用注解的包，包括子集 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="jdbc:mysql://localhost:3306/tiangou?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>
	<!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:com/tiangou/mapper/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tiangou.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!-- 开启事务注解驱动 -->  
    <tx:annotation-driven proxy-target-class="true" order="2"  /> 
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
  
	<!-- 配置事务通知属性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <!-- 定义事务传播属性 -->  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="new*" propagation="REQUIRED" />  
            <tx:method name="set*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="change*" propagation="REQUIRED" />  
            <tx:method name="check*" propagation="REQUIRED" />  
             <tx:method name="get*" propagation="REQUIRED"/>  
            <tx:method name="find*" propagation="REQUIRED" />  
            <tx:method name="load*" propagation="REQUIRED"/>  
            <tx:method name="*" propagation="REQUIRED" />         
        </tx:attributes>  
    </tx:advice>  
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>  
                <!-- 处理其它异常(包括Controller抛出的) -->  
                <prop key="java.lang.Throwable">WEB-INF/500</prop>  
            </props>  
        </property>  
    </bean>  
    <!-- 配置事务切面 -->  
    <aop:config>  
        <aop:pointcut id="serviceOperation"  
            expression="execution(* com.tiangou.service.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />  
    </aop:config>  
    <!-- 
    shiroQUANXIAN
     -->
       <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
<!--     <bean id="myRealm" class="com.tiangou.realm.MyRealm"/>   -->
  
<!--     Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session   -->
<!--     即<property name="sessionMode" value="native"/>,详细说明见官方文档   -->
<!--     这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替   -->
<!--     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">   -->
<!--         <property name="realm" ref="myRealm"/>   -->
<!--     </bean>   -->
  
<!--     Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行   -->
<!--     Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持   -->
<!--     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   -->
<!--         Shiro的核心安全接口,这个属性是必须的   -->
<!--         <property name="securityManager" ref="securityManager"/>   -->
<!--         要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面   -->
<!--         <property name="loginUrl" value="/"/>   -->
<!--         登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了)   -->
<!--         <property name="successUrl" value="/system/main"/>   -->
<!--         用户访问未对其授权的资源时,所显示的连接   -->
<!--         若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp   -->
<!--         <property name="unauthorizedUrl" value="/"/>   -->
<!--         Shiro连接约束配置,即过滤链的定义   -->
<!--         此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839   -->
<!--         下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的   -->
<!--         anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种   -->
<!--         authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter   -->
<!--         <property name="filterChainDefinitions">   -->
<!--             <value>   -->
<!--                 /mydemo/login=anon   -->
<!--                 /mydemo/getVerifyCodeImage=anon   -->
<!--                 /main**=authc   -->
<!--                 /user/info**=authc   -->
<!--                 /admin/listUser**=authc,perms[admin:manage]   -->
<!--             </value>   -->
<!--         </property>   -->
<!--     </bean>   -->
  
<!--     保证实现了Shiro内部lifecycle函数的bean执行   -->
<!--     <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>   -->
  
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
 
    </bean>        -->
   <!-- 自动扫描 -->   
	<context:component-scan base-package="com.tiangou.service,com.tiangou.aop" />
	<context:component-scan base-package="com.tiangou.websocket" />
</beans>